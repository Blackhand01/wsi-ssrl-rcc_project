# -*- coding: utf-8 -*-
"""Readme.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k44BnkQb4uP2jIN-MLrfaAQHJ7-TwgBm

<h1>Table of Contents<span class="tocSkip"></span></h1>
<div class="toc"><ul class="toc-item"><li><span><a href="#Import" data-toc-modified-id="Import-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>Import</a></span></li><li><span><a href="#Load-data" data-toc-modified-id="Load-data-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>Load data</a></span></li><li><span><a href="#Segmentation-mask" data-toc-modified-id="Segmentation-mask-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>Segmentation mask</a></span></li><li><span><a href="#Original-image" data-toc-modified-id="Original-image-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>Original image</a></span></li><li><span><a href="#Overlay-between-segmentation-and-original-image" data-toc-modified-id="Overlay-between-segmentation-and-original-image-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>Overlay between segmentation and original image</a></span></li></ul></div>

Install openslide system-wise if not installed yet:


 1. sudo apt update && apt install -y openslide-tools

 2. pip install openslide-python

# Import
"""

import os
import pickle
import openslide
import numpy as np
import matplotlib.pyplot as plt
from wsi_manager import CropList, SectionManager

"""# Load data"""

rootdir = "/mnt/c/Users/franc/Documents/README"
filepath_object = os.path.join(rootdir, "H19-754-IHC-ccRCC_crop_obj.pickle")
with open(filepath_object, "rb") as handle:
    data = pickle.load(handle)

data

"""- This object implements a type which behaves like a python list.
It has different attributes among which the indexes one:

    `data.indexes`

- This latter objects is a list of dict.
        
    Each dict in the list has different keys
    
    `{'top': 132286,
  'left': 35745,
  'size': 2000,
  'augmented': False,
  'filepath_slide': '/space/ponzio/Morpheme_v2/data/RCC_WSIs/ccRCC/H19.754.IHC.ccRCC.scn',
  'level': 0,
  'mask': array([....]),
  'slide_label': None}`
  
  Note that not all the item have the `mask` key. Where `mask` key is not present this means that crop was background slide
  
  Where present, the value assciated with the `mask` key is the vascular segmentation (see below)
  
"""

data.indexes

"""# Segmentation mask

For instance data.indexes[200] has the `'mask'` key.
You can plot it
"""

print(data.indexes[710]['mask'].shape)
data.indexes[710]['mask']

fig, ax = plt.subplots(1, 1)
mask = data.indexes[500]['mask'].copy()
mask[mask >= 0.3] = 255 #  You can change the thickness of the mask here
ax.imshow(mask,  cmap='gray')
ax.axis('off');

"""# Original image

The class CropList implements a type which behaves like a python list, but reads data from disk only when required.

This allows the usage of large WSI without being constrained by the amount of available memory.

To get the region of the WSI corresponding to the mask you can leverage the dict keys
    `'top'`
    `'left'` in the following way
"""

filepath_wsi = os.path.basename(data.indexes[500]['filepath_slide'])
print(filepath_wsi)  # Note that Windows see .scn files as tif, so you have to change filename
wsi = openslide.OpenSlide(os.path.join(rootdir, "H19.754.IHC.ccRCC.tif"))
crop_corresponding_to_mask = wsi.read_region([data.indexes[500]['left'],
                                              data.indexes[500]['top']],
                                             data.indexes[500]['level'],
                                             [data.indexes[500]['size'],
                                              data.indexes[500]['size']])
print("Shape is 2000x2000: {} and we have also alpha channel".format(np.array(crop_corresponding_to_mask).shape))
# Resize to mask size (512x512)
crop_corresponding_to_mask_resized = np.array(crop_corresponding_to_mask.resize((512, 512)))

"""# Overlay between segmentation and original image"""

fig, ax = plt.subplots(1, 2, figsize=(20, 20))
ax[1].imshow(crop_corresponding_to_mask_resized)
ax[1].imshow(mask, cmap='jet', alpha=0.3)
ax[1].axis('off');
ax[0].imshow(crop_corresponding_to_mask_resized)
ax[0].axis('off');